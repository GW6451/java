/*
 * Generated by the Jasper component of Apache Tomcat
 * Version: Apache Tomcat/9.0.39
 * Generated at: 2020-11-28 08:35:35 UTC
 * Note: The last modified time of this file was set to
 *       the last modified time of the source file after
 *       generation to assist with modification tracking.
 */
package org.apache.jsp.InnerObject03;

import javax.servlet.*;
import javax.servlet.http.*;
import javax.servlet.jsp.*;
import java.util.Enumeration;

public final class Application_005f1_jsp extends org.apache.jasper.runtime.HttpJspBase
    implements org.apache.jasper.runtime.JspSourceDependent,
                 org.apache.jasper.runtime.JspSourceImports {


	//[선언부에서 물리적 경로 얻는 방법들]
	//1]this키워드 사용
	private String getRealPath(){
		return this.getServletContext().getRealPath("/Images");
	}
	//2]매개변수로 내장객체 전달받기
	private String getRealPath(ServletContext app){
		return app.getRealPath("/Images");
	}
	//3]멤버변수 사용
	private ServletContext application;
	private String getRealPath2(){
		return application.getRealPath("/Images");
	}

  private static final javax.servlet.jsp.JspFactory _jspxFactory =
          javax.servlet.jsp.JspFactory.getDefaultFactory();

  private static java.util.Map<java.lang.String,java.lang.Long> _jspx_dependants;

  private static final java.util.Set<java.lang.String> _jspx_imports_packages;

  private static final java.util.Set<java.lang.String> _jspx_imports_classes;

  static {
    _jspx_imports_packages = new java.util.HashSet<>();
    _jspx_imports_packages.add("javax.servlet");
    _jspx_imports_packages.add("javax.servlet.http");
    _jspx_imports_packages.add("javax.servlet.jsp");
    _jspx_imports_classes = new java.util.HashSet<>();
    _jspx_imports_classes.add("java.util.Enumeration");
  }

  private volatile javax.el.ExpressionFactory _el_expressionfactory;
  private volatile org.apache.tomcat.InstanceManager _jsp_instancemanager;

  public java.util.Map<java.lang.String,java.lang.Long> getDependants() {
    return _jspx_dependants;
  }

  public java.util.Set<java.lang.String> getPackageImports() {
    return _jspx_imports_packages;
  }

  public java.util.Set<java.lang.String> getClassImports() {
    return _jspx_imports_classes;
  }

  public javax.el.ExpressionFactory _jsp_getExpressionFactory() {
    if (_el_expressionfactory == null) {
      synchronized (this) {
        if (_el_expressionfactory == null) {
          _el_expressionfactory = _jspxFactory.getJspApplicationContext(getServletConfig().getServletContext()).getExpressionFactory();
        }
      }
    }
    return _el_expressionfactory;
  }

  public org.apache.tomcat.InstanceManager _jsp_getInstanceManager() {
    if (_jsp_instancemanager == null) {
      synchronized (this) {
        if (_jsp_instancemanager == null) {
          _jsp_instancemanager = org.apache.jasper.runtime.InstanceManagerFactory.getInstanceManager(getServletConfig());
        }
      }
    }
    return _jsp_instancemanager;
  }

  public void _jspInit() {
  }

  public void _jspDestroy() {
  }

  public void _jspService(final javax.servlet.http.HttpServletRequest request, final javax.servlet.http.HttpServletResponse response)
      throws java.io.IOException, javax.servlet.ServletException {

    if (!javax.servlet.DispatcherType.ERROR.equals(request.getDispatcherType())) {
      final java.lang.String _jspx_method = request.getMethod();
      if ("OPTIONS".equals(_jspx_method)) {
        response.setHeader("Allow","GET, HEAD, POST, OPTIONS");
        return;
      }
      if (!"GET".equals(_jspx_method) && !"POST".equals(_jspx_method) && !"HEAD".equals(_jspx_method)) {
        response.setHeader("Allow","GET, HEAD, POST, OPTIONS");
        response.sendError(HttpServletResponse.SC_METHOD_NOT_ALLOWED, "JSP들은 오직 GET, POST 또는 HEAD 메소드만을 허용합니다. Jasper는 OPTIONS 메소드 또한 허용합니다.");
        return;
      }
    }

    final javax.servlet.jsp.PageContext pageContext;
    javax.servlet.http.HttpSession session = null;
    final javax.servlet.ServletContext application;
    final javax.servlet.ServletConfig config;
    javax.servlet.jsp.JspWriter out = null;
    final java.lang.Object page = this;
    javax.servlet.jsp.JspWriter _jspx_out = null;
    javax.servlet.jsp.PageContext _jspx_page_context = null;


    try {
      response.setContentType("text/html; charset=UTF-8");
      pageContext = _jspxFactory.getPageContext(this, request, response,
      			null, true, 8192, true);
      _jspx_page_context = pageContext;
      application = pageContext.getServletContext();
      config = pageContext.getServletConfig();
      session = pageContext.getSession();
      out = pageContext.getOut();
      _jspx_out = out;

      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("<!DOCTYPE html>\r\n");
      out.write("<html>\r\n");
      out.write("<head>\r\n");
      out.write("<meta charset=\"UTF-8\">\r\n");
      out.write("<title>Application_1.jsp</title>\r\n");
      out.write("</head>\r\n");
      out.write("<body>\r\n");
      out.write("\t<fieldset>\r\n");
      out.write("\t\t<legend>application 내장 객체의 주요 메소드</legend>\r\n");
      out.write("\t\t<!-- \r\n");
      out.write("\t\t    -컨텍스트 초기화 파라미터\r\n");
      out.write("\t\t\t목적]웹 어플리케이션(컨텍스트)을 구성하는 모든  jsp(서블릿)\r\n");
      out.write("\t\t\t     에서 스트링형 상수를 공유하기 위함.\r\n");
      out.write("\t\t\tSTEP1] web.xml에 컨텍스트 초기화 파라미터 등록    \r\n");
      out.write("\t\t\tSTEP2] ServletContext의 getInitParameter(\"파라미터명\") \r\n");
      out.write("\t\t\t         메소드로 얻기\t\t\r\n");
      out.write("\t\t -->\r\n");
      out.write("\t\t <ul style=\"list-style:upper-roman;\">\r\n");
      out.write("\t\t \t<li>오라클 드라이버:");
      out.print(application.getInitParameter("ORACLE_DRIVER") );
      out.write("</li>\r\n");
      out.write("\t\t \t<li>오라클 주소:");
      out.print(application.getInitParameter("ORACLE_URL") );
      out.write("</li>\r\n");
      out.write("\t\t \t<li>this.getInitParameter(서블릿 초기화 파라미터):");
      out.print(this.getInitParameter("ORACLE_DRIVER") );
      out.write("</li>\r\n");
      out.write("\t\t \t<li>서블릿 초기화 파라미터(this) : ");
      out.print(this.getInitParameter("SERVLET_INIT") );
      out.write("</li>\r\n");
      out.write("\t\t \t<li>서블릿 초기화 파라미터(config) :");
      out.print(config.getInitParameter("SERVLET_INIT") );
      out.write("</li>\r\n");
      out.write("\t\t </ul>\r\n");
      out.write("\t\t <h2>컨텍스트 초기화 파라미터 목록</h2>\r\n");
      out.write("\t\t <ul style=\"list-style:upper-roman;\">\r\n");
      out.write("\t\t \t");
 
		 	
		 	Enumeration<String> names= application.getInitParameterNames(); 
		 	while(names.hasMoreElements()){
		 		//컨테스트 초기화 파라미터명 얻기]
		 		String paramName=names.nextElement();
		 		//컨테스트 초기화 파라미터값 얻기]
		 		String paramValue = application.getInitParameter(paramName);
		 	
      out.write("\r\n");
      out.write("\t\t \t<li>");
      out.print(paramName );
      out.write(' ');
      out.write(':');
      out.write(' ');
      out.print(paramValue );
      out.write("</li>\r\n");
      out.write("\t\t \t");
 }///while 
      out.write("\r\n");
      out.write("\t\t </ul>\r\n");
      out.write("\t\t <h2>서버의 물리적 경로 얻기</h2>\r\n");
      out.write("\t\t  <!-- \r\n");
      out.write("\t\t\tServletContext의 메소드인 \r\n");
      out.write("\t\t\tgetRealPath(/로 시작하는 웹상의 경로)로 얻는다.\r\n");
      out.write("\t\t\t웹상의 경로는 Context 루트를 제외한 /로 시작\r\n");
      out.write("\t \t-->\r\n");
      out.write("\t \t<ul style=\"list-style:upper-roman;\">\r\n");
      out.write("\t \t\t<li>application내장객체:");
      out.print(application.getRealPath("/Styles") );
      out.write("</li>\r\n");
      out.write("\t \t\t<li>request내장객체(주로 서블릿에서 사용):");
      out.print(request.getServletContext().getRealPath("/Styles") );
      out.write("</li>\r\n");
      out.write("\t \t\t<li>session내장객체:");
      out.print(session.getServletContext().getRealPath("/Styles") );
      out.write("</li>\r\n");
      out.write("\t \t\t<li>this키워드(선언부에서 사용):");
      out.print(this.getServletContext().getRealPath("/Styles") );
      out.write("</li>\r\n");
      out.write("\t \t</ul>\r\n");
      out.write("\t \t<h2>선언부에서 물리적 경로 얻기</h2>\r\n");
      out.write("\t \t<ul style=\"list-style:upper-roman;\">\r\n");
      out.write("\t \t\t<li>this 키워드 사용 : ");
      out.print(getRealPath() );
      out.write("</li>\r\n");
      out.write("\t \t\t<li>매개변수로 전달 : ");
      out.print(getRealPath(application) );
      out.write("</li>\r\n");
      out.write("\t \t\t");
 this.application=application; 
      out.write("\r\n");
      out.write("\t \t\t<li>멤버변수 사용 : ");
      out.print(getRealPath2() );
      out.write("</li>\r\n");
      out.write("\t \t</ul>\r\n");
      out.write("\t</fieldset>\r\n");
      out.write("</body>\r\n");
      out.write("</html>");
    } catch (java.lang.Throwable t) {
      if (!(t instanceof javax.servlet.jsp.SkipPageException)){
        out = _jspx_out;
        if (out != null && out.getBufferSize() != 0)
          try {
            if (response.isCommitted()) {
              out.flush();
            } else {
              out.clearBuffer();
            }
          } catch (java.io.IOException e) {}
        if (_jspx_page_context != null) _jspx_page_context.handlePageException(t);
        else throw new ServletException(t);
      }
    } finally {
      _jspxFactory.releasePageContext(_jspx_page_context);
    }
  }
}
